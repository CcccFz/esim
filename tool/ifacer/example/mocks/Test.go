// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	esimredis "github.com/jukylin/esim/redis"
	example1 "github.com/jukylin/esim/tool/ifacer/example"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/gomodule/redigo/redis"

	repo "github.com/jukylin/esim/tool/ifacer/example/repo"
)

// Test is an autogenerated mock type for the Test type
type Test struct {
	mock.Mock
}

// Close provides a mock function with given fields: _a0, _a1
func (_m *Test) Close(_a0 string, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *Test) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Iface1 provides a mock function with given fields: _a0
func (_m *Test) Iface1(_a0 func(string) string) (bool, redis.Pool) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(func(string) string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 redis.Pool
	if rf, ok := ret.Get(1).(func(func(string) string) redis.Pool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(redis.Pool)
	}

	return r0, r1
}

// Iface2 provides a mock function with given fields: ctx, found
func (_m *Test) Iface2(ctx context.Context, found *bool) (bool, error) {
	ret := _m.Called(ctx, found)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *bool) bool); ok {
		r0 = rf(ctx, found)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bool) error); ok {
		r1 = rf(ctx, found)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Iface3 provides a mock function with given fields:
func (_m *Test) Iface3() func(string) string {
	ret := _m.Called()

	var r0 func(string) string
	if rf, ok := ret.Get(0).(func() func(string) string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(string) string)
		}
	}

	return r0
}

// Iface4 provides a mock function with given fields:
func (_m *Test) Iface4() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Iface5 provides a mock function with given fields: redisClient
func (_m *Test) Iface5(redisClient *esimredis.RedisClient) *esimredis.RedisClient {
	ret := _m.Called(redisClient)

	var r0 *esimredis.RedisClient
	if rf, ok := ret.Get(0).(func(*esimredis.RedisClient) *esimredis.RedisClient); ok {
		r0 = rf(redisClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esimredis.RedisClient)
		}
	}

	return r0
}

// Iface6 provides a mock function with given fields: redisClient
func (_m *Test) Iface6(redisClient esimredis.RedisClient) esimredis.RedisClient {
	ret := _m.Called(redisClient)

	var r0 esimredis.RedisClient
	if rf, ok := ret.Get(0).(func(esimredis.RedisClient) esimredis.RedisClient); ok {
		r0 = rf(redisClient)
	} else {
		r0 = ret.Get(0).(esimredis.RedisClient)
	}

	return r0
}

// Iface7 provides a mock function with given fields: _a0
func (_m *Test) Iface7(_a0 chan<- bool) <-chan bool {
	ret := _m.Called(_a0)

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func(chan<- bool) <-chan bool); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// Iface8 provides a mock function with given fields: rp
func (_m *Test) Iface8(rp repo.Repo) repo.Repo {
	ret := _m.Called(rp)

	var r0 repo.Repo
	if rf, ok := ret.Get(0).(func(repo.Repo) repo.Repo); ok {
		r0 = rf(rp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repo.Repo)
		}
	}

	return r0
}

// Iface9 provides a mock function with given fields: _a0
func (_m *Test) Iface9(_a0 example1.TestStruct) {
	_m.Called(_a0)
}

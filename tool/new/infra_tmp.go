package new

func InfraInit() {
	fc1 := &FileContent{
		FileName: "infra.go",
		Dir:      "internal/infra",
		Content: `package infra

import (
	"sync"
	"os"
	"github.com/google/wire"
	"github.com/jukylin/esim/container"
	"github.com/jukylin/esim/mysql"
	"github.com/jukylin/esim/config"
	"{{PROPATH}}{{service_name}}/internal/infra/repo"
)

var infraOnce sync.Once
var onceInfra *Infra

type Infra struct {
	*container.Esim

	DB mysql.MysqlClient

	UserRepo repo.UserRepo
}

var infraSet = wire.NewSet(
	wire.Struct(new(Infra), "*"),
	provideEsim,
	provideDb,
	provideUserRepo,
)


func NewInfra() *Infra {
	infraOnce.Do(func() {
		onceInfra = initInfra()
	})

	return onceInfra
}

func provideEsim() *container.Esim {


	container.SetConfFunc(func() config.Config {
		options := config.ViperConfOptions{}

		env := os.Getenv("ENV")
		if env == "" {
			env = "dev"
		}

		gopath := os.Getenv("GOPATH")

		monitFile := gopath + "/src/{{service_name}}/" + "conf/monitoring.yaml"
		confFile := gopath + "/src/{{service_name}}/" + "conf/" + env + ".yaml"

		file := []string{monitFile, confFile}
		return config.NewViperConfig(options.WithConfigType("yaml"),
			options.WithConfFile(file))
	})

	return container.NewEsim()
}


func provideDb(esim *container.Esim) mysql.MysqlClient {

	mysqlClientOptions := mysql.MysqlClientOptions{}
	mysqlClent := mysql.NewMysqlClient(
		mysqlClientOptions.WithConf(esim.Conf),
		mysqlClientOptions.WithLogger(esim.Log),
	)

	return mysqlClent
}



func provideUserRepo(esim *container.Esim) repo.UserRepo {
	return repo.NewUserRepo(esim.Log)
}
`,
	}

	fc2 := &FileContent{
		FileName: "wire.go",
		Dir:      "internal/infra",
		Content: `//+build wireinject

package infra

import (
	"github.com/google/wire"
)


func initInfra() *Infra {
	wire.Build(infraSet)
	return nil
}
`,
	}

	fc3 := &FileContent{
		FileName: "wire_gen.go",
		Dir:      "internal/infra",
		Content: `// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package infra

// Injectors from wire.go:

func initInfra() *Infra {
	esim := provideEsim()
	mysqlClient := provideDb(esim)
	userRepo := provideUserRepo(esim)
	infra := &Infra{
		Esim:     esim,
		DB:       mysqlClient,
		UserRepo: userRepo,
	}
	return infra
}
`,
	}

	Files = append(Files, fc1, fc2, fc3)
}
